<!--
	Plugin's configuration. XML files in plugins home directory (see proxy conf file)
	conforming this schema represents single pluggable Adaptive Proxy plugin that will
	be loaded (instantiated and configured) and treated as single plugin entity. Such
	file reference single class exposed by plugin in form of relative path to the plugins
	bundle (binaries) and name of the exposed class that is present within the bundle.
	It can also reference all 3rd party libraries needed by the plugin and plugin's
	working directory for which a plugin will obtain a java.io.File instance. File also
	specifies types of the plugin, i.e. how the plugin will be integrated into the
	process of handling HTTP messages, and can hold plugin's runtime configuration
	parameters.
-->
<!ELEMENT plugin (name, classLocation?, className, workingDir?, libraries?, types, parameters?)>

<!--
	The name of the plugin. This text is used for plugin identification. If there is
	plugin with the same name already loaded, the name uniqueness check is repeated
	with new names in format
		'name#NUM'					(without the quotation marks)
	where NUM is the integer starting at 0 and increased in each iteration by 1, until
	the new unique name is found.
-->
<!ELEMENT name (#PCDATA)>

<!--
	Plugin's classes class-path. Can point to either directory or a jar file. If
	there's no such element, default path pointing to plugins home directory
	(configured by 'plugins_home' parameter in AdaptiveEngine section of proxy conf file),
	where all plugins' XML configuration files are stored, is used. This path is relative
	to plugins home directory.
-->
<!ELEMENT classLocation (#PCDATA)>

<!--
	Name of the plugin's class - class implementing ProxyPlugin interface with zero
	argument constructor.
-->
<!ELEMENT className (#PCDATA)>

<!--
	Path to working directory of the plugin. If there's no such element, plugins home
	working directory will be set for the plugin. This path is relative to plugins home
	directory.
-->
<!ELEMENT workingDir (#PCDATA)>

<!--
	Plugin's dependencies class-paths. Each subelement can point to either directory or
	jar file. ClassLoader loading this plugin's class will also be able to load classes
	from these paths. This path is relative to plugins home directory.
-->
<!ELEMENT libraries (lib*)>
<!ELEMENT lib (#PCDATA)>

<!--
	Types of the plugin. Subelements text values need to be be one of these:
		RequestProcessingPlugin
		ResponseProcessingPlugin
		RequestServiceModule
		ResponseServiceModule
		ConnectionEventPlugin
		TimeoutEventPlugin
		FailureEventPlugin
	or the plugin won't be used by the proxy.
-->
<!ELEMENT types (type*)>
<!ELEMENT type (#PCDATA)>

<!--
	Configuration parameters. May be omitted. Subelements are in format
		<param name="KEY">VALUE</param>
-->
<!ELEMENT parameters (param*)>
<!ELEMENT param (#PCDATA)>
<!ATTLIST param
  name		CDATA	#REQUIRED
>